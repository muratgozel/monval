{"version":3,"file":"index.js","sources":["../../../build/currencies.js","../../../build/monval.js"],"sourcesContent":["export const currencyCodes = [\n    'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND',\n    'BOB', 'BRL', 'BSD', 'BTC', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLF', 'CLP', 'CNH', 'CNY', 'COP', 'CRC', 'CUC',\n    'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP',\n    'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD',\n    'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD',\n    'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR',\n    'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG',\n    'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP', 'STD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY',\n    'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XCD', 'XDR',\n    'XOF', 'XPD', 'XPF', 'XPT', 'YER', 'ZAR', 'ZMW', 'ZWL'\n];\n","import { currencyCodes } from './currencies.js';\nexport class Monval {\n    currencyCodes = Array.from(currencyCodes);\n    defaultCurrency = 'EUR';\n    exchangeRates = {};\n    exchangeRatesBaseCurrency = 'EUR';\n    currencySymbolUnicodeMap = {\n        TRY: '20BA', USD: '0024', EUR: '20ac', GBP: '00A3',\n        JPY: '00A5', AMD: '058F', AFN: '060B', THB: '0E3F',\n        SVC: '20A1', CRC: '20A1', INR: '20B9', BTC: '20BF'\n    };\n    decilen = 2;\n    reNumberWithCurrency = /[a-zA-Z]{3}\\s[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reOnlyNumbers = /^[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reRate = /%[0-9]+((.|,)[0-9]+)?/;\n    isValidInput(input) {\n        if (this.isMoney(input))\n            return true;\n        if (typeof input === 'string' && this.reNumberWithCurrency.test(input)) {\n            const [currency, _num] = input.split(' ');\n            return this.isCurrency(currency);\n        }\n        return false;\n    }\n    create(input, currency) {\n        const cur = currency || this.defaultCurrency;\n        if (this.isMoney(input)) {\n            return new Account(this, input);\n        }\n        if (this.isNumber(input)) {\n            const money = { currency: cur, number: input };\n            return new Account(this, money);\n        }\n        if (this.reOnlyNumbers.test(input)) {\n            const money = { currency: cur, number: parseFloat(input) };\n            return new Account(this, money);\n        }\n        if (this.reNumberWithCurrency.test(input)) {\n            const [currency, num] = input.split(' ');\n            if (!this.isCurrency(currency)) {\n                throw new Error(`Bad input. No such currency as ${currency}`);\n            }\n            const money = { currency: currency, number: parseFloat(num) };\n            return new Account(this, money);\n        }\n        throw new Error('Bad input. Valid kinds of inputs are create(\"EUR 1.23\"), create(\"1.23\", \"EUR\"), create(\"1.23\") or create({number: 1.23, currency: \\'EUR\\'}).');\n    }\n    exchange(money, target) {\n        if (!Object.hasOwn(this.exchangeRates, this.exchangeRatesBaseCurrency)) {\n            throw new Error('Exchange rates not found.');\n        }\n        if (!Object.hasOwn(this.exchangeRates, money.currency)) {\n            throw new Error(`Exchange rate for ${money.currency} not found.`);\n        }\n        if (!Object.hasOwn(this.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        money.number = money.number * ((this.exchangeRates[target] || 0) / (this.exchangeRates[money.currency] || 1));\n        money.currency = target;\n        return money;\n    }\n    getCurrencySymbol(currency) {\n        if (Object.hasOwn(this.currencySymbolUnicodeMap, currency)) {\n            return String.fromCharCode(parseInt(this.currencySymbolUnicodeMap[currency] || '', 16));\n        }\n        return currency;\n    }\n    round(n, d, algorithm = 'GAUSSIAN') {\n        switch (algorithm) {\n            case 'GAUSSIAN': {\n                const x = n * Math.pow(10, d);\n                const r = Math.round(x);\n                const br = Math.abs(x) % 1 === 0.5 ? (r % 2 === 0 ? r : r - 1) : r;\n                return br / Math.pow(10, d);\n            }\n            default:\n                throw new Error('Unsupported rounding algorithm.');\n        }\n    }\n    isRate(v) {\n        return typeof v === 'string' && this.reRate.test(v);\n    }\n    isNumber(v) {\n        return typeof v === 'number' && Number.isFinite(v);\n    }\n    isCurrency(v) {\n        return typeof v === 'string' && this.currencyCodes.find((code) => code === v) !== undefined;\n    }\n    isObject(v) {\n        return (!!v) && (v.constructor === Object);\n    }\n    isMoney(v) {\n        if (this.isObject(v)) {\n            if (Object.hasOwn(v, 'currency') && Object.hasOwn(v, 'number')) {\n                if (this.isCurrency(v.currency) && this.isNumber(v.number)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nexport class Account {\n    monval;\n    money;\n    constructor(monval, money) {\n        this.monval = monval;\n        this.money = money;\n    }\n    add(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.addRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        throw new Error('Bad input. You should specify either number or rate such as \"%1.23\"');\n    }\n    addRate(rate) {\n        this.money.number = this.money.number + (this.money.number * rate / 100);\n        return this;\n    }\n    addMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number += _money.number;\n            return this;\n        }\n        this.money.number += money.number;\n        return this;\n    }\n    subtract(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.subtractRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        throw new Error('Bad input. You should specify either number or rate such as \"%1.23\"');\n    }\n    subtractRate(rate) {\n        this.money.number = this.money.number - (this.money.number * rate / 100);\n        return this;\n    }\n    subtractMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number -= _money.number;\n            return this;\n        }\n        this.money.number -= money.number;\n        return this;\n    }\n    exchange(target) {\n        if (!Object.hasOwn(this.monval.exchangeRates, this.monval.exchangeRatesBaseCurrency)) {\n            throw new Error('Exchange rates not found.');\n        }\n        if (!Object.hasOwn(this.monval.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        this.money.number = this.money.number * ((this.monval.exchangeRates[target] || 0) / (this.monval.exchangeRates[this.money.currency] || 1));\n        this.money.currency = target;\n        return this;\n    }\n    toFixed(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        const str = this.monval.round(this.money.number, _decilen).toString();\n        if (_decilen < 1) {\n            return str;\n        }\n        if (!str.includes('.')) {\n            return str + '.' + Array.from(Array(_decilen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        const existingDecimalsLen = (str.split('.')[1] || []).length;\n        if (_decilen > existingDecimalsLen) {\n            return str + Array.from(Array(_decilen - existingDecimalsLen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        return str;\n    }\n    toFloat() {\n        return this.money.number;\n    }\n    toObject() {\n        return this.money;\n    }\n    pretty(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        return this.monval.getCurrencySymbol(this.money.currency) + ' ' + this.toFixed(_decilen);\n    }\n}\nexport const monval = new Monval();\n"],"names":["currencyCodes","Monval","_classCallCheck","_defineProperty","_Array$from","TRY","USD","EUR","GBP","JPY","AMD","AFN","THB","SVC","CRC","INR","BTC","_createClass","key","value","isValidInput","input","isMoney","reNumberWithCurrency","test","_input$split","split","_input$split2","_slicedToArray","currency","_num","isCurrency","create","cur","defaultCurrency","Account","isNumber","money","number","reOnlyNumbers","_parseFloat","_input$split3","_input$split4","num","Error","concat","exchange","target","Object","hasOwn","exchangeRates","exchangeRatesBaseCurrency","getCurrencySymbol","currencySymbolUnicodeMap","String","fromCharCode","_parseInt","round","n","d","algorithm","arguments","length","undefined","x","Math","pow","r","br","abs","isRate","v","reRate","_Number$isFinite","_context","_findInstanceProperty","call","code","isObject","constructor","monval","add","numberOrRate","addMoney","addRate","_sliceInstanceProperty","rate","_money","subtract","subtractMoney","subtractRate","toFixed","decilen","_decilen","str","toString","_includesInstanceProperty","_context2","_mapInstanceProperty","Array","Number","prototype","valueOf","join","existingDecimalsLen","_context3","toFloat","toObject","pretty"],"mappings":"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"}