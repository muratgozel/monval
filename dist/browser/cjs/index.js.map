{"version":3,"file":"index.js","sources":["../../../build/currencies.js","../../../build/monval.js"],"sourcesContent":["export const currencies = [\n    \"AED\", \"AFN\", \"ALL\", \"AMD\", \"ANG\", \"AOA\", \"ARS\", \"AUD\", \"AWG\", \"AZN\", \"BAM\", \"BBD\", \"BDT\", \"BGN\", \"BHD\", \"BIF\", \"BMD\", \"BND\",\n    \"BOB\", \"BRL\", \"BSD\", \"BTC\", \"BTN\", \"BWP\", \"BYN\", \"BZD\", \"CAD\", \"CDF\", \"CHF\", \"CLF\", \"CLP\", \"CNH\", \"CNY\", \"COP\", \"CRC\", \"CUC\",\n    \"CUP\", \"CVE\", \"CZK\", \"DJF\", \"DKK\", \"DOP\", \"DZD\", \"EGP\", \"ERN\", \"ETB\", \"EUR\", \"FJD\", \"FKP\", \"GBP\", \"GEL\", \"GGP\", \"GHS\", \"GIP\",\n    \"GMD\", \"GNF\", \"GTQ\", \"GYD\", \"HKD\", \"HNL\", \"HRK\", \"HTG\", \"HUF\", \"IDR\", \"ILS\", \"IMP\", \"INR\", \"IQD\", \"IRR\", \"ISK\", \"JEP\", \"JMD\",\n    \"JOD\", \"JPY\", \"KES\", \"KGS\", \"KHR\", \"KMF\", \"KPW\", \"KRW\", \"KWD\", \"KYD\", \"KZT\", \"LAK\", \"LBP\", \"LKR\", \"LRD\", \"LSL\", \"LYD\", \"MAD\",\n    \"MDL\", \"MGA\", \"MKD\", \"MMK\", \"MNT\", \"MOP\", \"MRU\", \"MUR\", \"MVR\", \"MWK\", \"MXN\", \"MYR\", \"MZN\", \"NAD\", \"NGN\", \"NIO\", \"NOK\", \"NPR\",\n    \"NZD\", \"OMR\", \"PAB\", \"PEN\", \"PGK\", \"PHP\", \"PKR\", \"PLN\", \"PYG\", \"QAR\", \"RON\", \"RSD\", \"RUB\", \"RWF\", \"SAR\", \"SBD\", \"SCR\", \"SDG\",\n    \"SEK\", \"SGD\", \"SHP\", \"SLL\", \"SOS\", \"SRD\", \"SSP\", \"STD\", \"STN\", \"SVC\", \"SYP\", \"SZL\", \"THB\", \"TJS\", \"TMT\", \"TND\", \"TOP\", \"TRY\",\n    \"TTD\", \"TWD\", \"TZS\", \"UAH\", \"UGX\", \"USD\", \"UYU\", \"UZS\", \"VEF\", \"VES\", \"VND\", \"VUV\", \"WST\", \"XAF\", \"XAG\", \"XAU\", \"XCD\", \"XDR\",\n    \"XOF\", \"XPD\", \"XPF\", \"XPT\", \"YER\", \"ZAR\", \"ZMW\", \"ZWL\"\n];\n","import { currencies } from \"@/currencies\";\nexport class Monval {\n    currencies = currencies;\n    defaultCurrency = 'EUR';\n    exchangeRates = {};\n    exchangeRatesBaseCurrency = 'EUR';\n    currencySymbolUnicodeMap = {\n        TRY: '20BA', USD: '0024', EUR: '20ac', GBP: '00A3',\n        JPY: '00A5', AMD: '058F', AFN: '060B', THB: '0E3F',\n        SVC: '20A1', CRC: '20A1', INR: '20B9', BTC: '20BF'\n    };\n    decilen = 2;\n    reNumberWithCurrency = /[a-zA-Z]{3}\\s[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reOnlyNumbers = /^[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reRate = /%[0-9]+((.|,)[0-9]+)?/;\n    create(input, currency) {\n        const cur = currency || this.defaultCurrency;\n        if (this.isNumber(input)) {\n            const money = { currency: cur, number: input };\n            return new Account(this, money);\n        }\n        if (this.reOnlyNumbers.test(input)) {\n            const money = { currency: cur, number: parseFloat(input) };\n            return new Account(this, money);\n        }\n        if (this.reNumberWithCurrency.test(input)) {\n            const [currency, num] = input.split(' ');\n            const money = { currency: currency, number: parseFloat(num) };\n            return new Account(this, money);\n        }\n        throw new Error(`Bad input. Valid kinds of input are create(\"USD 1.23\"), create(\"1.23\", \"EUR\") or create(\"1.23\").`);\n    }\n    exchange(money, target) {\n        if (!Object.hasOwn(this.exchangeRates, this.exchangeRatesBaseCurrency)) {\n            throw new Error(`Exchange rates not found.`);\n        }\n        if (!Object.hasOwn(this.exchangeRates, money.currency)) {\n            throw new Error(`Exchange rate for ${money.currency} not found.`);\n        }\n        if (!Object.hasOwn(this.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        money.number = money.number * ((this.exchangeRates[target] || 0) / (this.exchangeRates[money.currency] || 1));\n        money.currency = target;\n        return money;\n    }\n    getCurrencySymbol(currency) {\n        if (Object.hasOwn(this.currencySymbolUnicodeMap, currency)) {\n            return String.fromCharCode(parseInt(this.currencySymbolUnicodeMap[currency] || '', 16));\n        }\n        return currency;\n    }\n    round(n, d, algorithm = 'GAUSSIAN') {\n        switch (algorithm) {\n            case 'GAUSSIAN':\n                const x = n * Math.pow(10, d);\n                const r = Math.round(x);\n                const br = Math.abs(x) % 1 === 0.5 ? (r % 2 === 0 ? r : r - 1) : r;\n                return br / Math.pow(10, d);\n            default:\n                throw new Error('Unsupported rounding algorithm.');\n        }\n    }\n    isRate(v) {\n        return typeof v === 'string' && this.reRate.test(v);\n    }\n    isNumber(v) {\n        return typeof v === 'number' && Number.isFinite(v);\n    }\n}\nexport class Account {\n    monval;\n    money;\n    constructor(monval, money) {\n        this.monval = monval;\n        this.money = money;\n    }\n    add(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.addRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        throw new Error(`Bad input. You should specify either number or rate such as \"%1.23\"`);\n    }\n    addRate(rate) {\n        this.money.number = this.money.number + (this.money.number * rate / 100);\n        return this;\n    }\n    addMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number += _money.number;\n            return this;\n        }\n        this.money.number += money.number;\n        return this;\n    }\n    subtract(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.subtractRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        throw new Error(`Bad input. You should specify either number or rate such as \"%1.23\"`);\n    }\n    subtractRate(rate) {\n        this.money.number = this.money.number - (this.money.number * rate / 100);\n        return this;\n    }\n    subtractMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number -= _money.number;\n            return this;\n        }\n        this.money.number -= money.number;\n        return this;\n    }\n    exchange(target) {\n        if (!Object.hasOwn(this.monval.exchangeRates, this.monval.exchangeRatesBaseCurrency)) {\n            throw new Error(`Exchange rates not found.`);\n        }\n        if (!Object.hasOwn(this.monval.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        this.money.number = this.money.number * ((this.monval.exchangeRates[target] || 0) / (this.monval.exchangeRates[this.money.currency] || 1));\n        this.money.currency = target;\n        return this;\n    }\n    toFixed(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        const str = this.monval.round(this.money.number, _decilen).toString();\n        if (_decilen < 1) {\n            return str;\n        }\n        if (!str.includes('.')) {\n            return str + '.' + Array.apply(null, Array(_decilen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        const existingDecimalsLen = (str.split('.')[1] || []).length;\n        if (_decilen > existingDecimalsLen) {\n            return str + Array.apply(null, Array(_decilen - existingDecimalsLen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        return str;\n    }\n    toFloat() {\n        return this.money.number;\n    }\n    toObject() {\n        return this.money;\n    }\n    pretty(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        return this.monval.getCurrencySymbol(this.money.currency) + ' ' + this.toFixed(_decilen);\n    }\n}\nexport const monval = new Monval();\n"],"names":["currencies","Monval","_classCallCheck","_defineProperty","TRY","USD","EUR","GBP","JPY","AMD","AFN","THB","SVC","CRC","INR","BTC","_createClass","key","value","create","input","currency","cur","defaultCurrency","isNumber","money","number","Account","reOnlyNumbers","test","_parseFloat","reNumberWithCurrency","_input$split","split","_input$split2","_slicedToArray","num","Error","exchange","target","Object","hasOwn","exchangeRates","exchangeRatesBaseCurrency","concat","getCurrencySymbol","currencySymbolUnicodeMap","String","fromCharCode","_parseInt","round","n","d","algorithm","arguments","length","undefined","x","Math","pow","r","br","abs","isRate","v","reRate","_Number$isFinite","monval","add","numberOrRate","addMoney","addRate","_sliceInstanceProperty","call","rate","_money","subtract","subtractMoney","subtractRate","toFixed","decilen","_decilen","str","toString","_includesInstanceProperty","_context","_mapInstanceProperty","Array","apply","Number","prototype","valueOf","join","existingDecimalsLen","_context2","toFloat","toObject","pretty"],"mappings":"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"}