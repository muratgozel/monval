{"version":3,"file":"index.js","sources":["../../../build/currencies.js","../../../build/monval.js"],"sourcesContent":["export const currencies = [\n    \"AED\", \"AFN\", \"ALL\", \"AMD\", \"ANG\", \"AOA\", \"ARS\", \"AUD\", \"AWG\", \"AZN\", \"BAM\", \"BBD\", \"BDT\", \"BGN\", \"BHD\", \"BIF\", \"BMD\", \"BND\",\n    \"BOB\", \"BRL\", \"BSD\", \"BTC\", \"BTN\", \"BWP\", \"BYN\", \"BZD\", \"CAD\", \"CDF\", \"CHF\", \"CLF\", \"CLP\", \"CNH\", \"CNY\", \"COP\", \"CRC\", \"CUC\",\n    \"CUP\", \"CVE\", \"CZK\", \"DJF\", \"DKK\", \"DOP\", \"DZD\", \"EGP\", \"ERN\", \"ETB\", \"EUR\", \"FJD\", \"FKP\", \"GBP\", \"GEL\", \"GGP\", \"GHS\", \"GIP\",\n    \"GMD\", \"GNF\", \"GTQ\", \"GYD\", \"HKD\", \"HNL\", \"HRK\", \"HTG\", \"HUF\", \"IDR\", \"ILS\", \"IMP\", \"INR\", \"IQD\", \"IRR\", \"ISK\", \"JEP\", \"JMD\",\n    \"JOD\", \"JPY\", \"KES\", \"KGS\", \"KHR\", \"KMF\", \"KPW\", \"KRW\", \"KWD\", \"KYD\", \"KZT\", \"LAK\", \"LBP\", \"LKR\", \"LRD\", \"LSL\", \"LYD\", \"MAD\",\n    \"MDL\", \"MGA\", \"MKD\", \"MMK\", \"MNT\", \"MOP\", \"MRU\", \"MUR\", \"MVR\", \"MWK\", \"MXN\", \"MYR\", \"MZN\", \"NAD\", \"NGN\", \"NIO\", \"NOK\", \"NPR\",\n    \"NZD\", \"OMR\", \"PAB\", \"PEN\", \"PGK\", \"PHP\", \"PKR\", \"PLN\", \"PYG\", \"QAR\", \"RON\", \"RSD\", \"RUB\", \"RWF\", \"SAR\", \"SBD\", \"SCR\", \"SDG\",\n    \"SEK\", \"SGD\", \"SHP\", \"SLL\", \"SOS\", \"SRD\", \"SSP\", \"STD\", \"STN\", \"SVC\", \"SYP\", \"SZL\", \"THB\", \"TJS\", \"TMT\", \"TND\", \"TOP\", \"TRY\",\n    \"TTD\", \"TWD\", \"TZS\", \"UAH\", \"UGX\", \"USD\", \"UYU\", \"UZS\", \"VEF\", \"VES\", \"VND\", \"VUV\", \"WST\", \"XAF\", \"XAG\", \"XAU\", \"XCD\", \"XDR\",\n    \"XOF\", \"XPD\", \"XPF\", \"XPT\", \"YER\", \"ZAR\", \"ZMW\", \"ZWL\"\n];\n","import { currencies } from \"@/currencies\";\nconst withTuple = (list) => (prop) => list.includes(prop);\nconst hasProp = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nexport class Monval {\n    currencies = currencies;\n    defaultCurrency = 'EUR';\n    exchangeRates = {};\n    exchangeRatesBaseCurrency = 'EUR';\n    currencySymbolUnicodeMap = {\n        TRY: '20BA', USD: '0024', EUR: '20ac', GBP: '00A3',\n        JPY: '00A5', AMD: '058F', AFN: '060B', THB: '0E3F',\n        SVC: '20A1', CRC: '20A1', INR: '20B9', BTC: '20BF'\n    };\n    decilen = 2;\n    reNumberWithCurrency = /[a-zA-Z]{3}\\s[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reOnlyNumbers = /^[0-9]+((.|,)[0-9]+)?((.|,)[0-9]+)?/;\n    reRate = /%[0-9]+((.|,)[0-9]+)?/;\n    isValidInput(input) {\n        if (this.isMoney(input))\n            return true;\n        if (typeof input === 'string' && this.reNumberWithCurrency.test(input)) {\n            const [currency, _num] = input.split(' ');\n            return this.isCurrency(currency);\n        }\n        return false;\n    }\n    create(input, currency) {\n        const cur = currency || this.defaultCurrency;\n        if (this.isMoney(input)) {\n            return new Account(this, input);\n        }\n        if (this.isNumber(input)) {\n            const money = { currency: cur, number: input };\n            return new Account(this, money);\n        }\n        if (this.reOnlyNumbers.test(input)) {\n            const money = { currency: cur, number: parseFloat(input) };\n            return new Account(this, money);\n        }\n        if (this.reNumberWithCurrency.test(input)) {\n            const [currency, num] = input.split(' ');\n            if (!this.isCurrency(currency)) {\n                throw new Error(`Bad input. No such currency as ${currency}`);\n            }\n            const money = { currency: currency, number: parseFloat(num) };\n            return new Account(this, money);\n        }\n        throw new Error(`Bad input. Valid kinds of inputs are create(\"EUR 1.23\"), create(\"1.23\", \"EUR\"), create(\"1.23\") or create({number: 1.23, currency: 'EUR'}).`);\n    }\n    exchange(money, target) {\n        if (!Object.hasOwn(this.exchangeRates, this.exchangeRatesBaseCurrency)) {\n            throw new Error(`Exchange rates not found.`);\n        }\n        if (!Object.hasOwn(this.exchangeRates, money.currency)) {\n            throw new Error(`Exchange rate for ${money.currency} not found.`);\n        }\n        if (!Object.hasOwn(this.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        money.number = money.number * ((this.exchangeRates[target] || 0) / (this.exchangeRates[money.currency] || 1));\n        money.currency = target;\n        return money;\n    }\n    getCurrencySymbol(currency) {\n        if (Object.hasOwn(this.currencySymbolUnicodeMap, currency)) {\n            return String.fromCharCode(parseInt(this.currencySymbolUnicodeMap[currency] || '', 16));\n        }\n        return currency;\n    }\n    round(n, d, algorithm = 'GAUSSIAN') {\n        switch (algorithm) {\n            case 'GAUSSIAN':\n                const x = n * Math.pow(10, d);\n                const r = Math.round(x);\n                const br = Math.abs(x) % 1 === 0.5 ? (r % 2 === 0 ? r : r - 1) : r;\n                return br / Math.pow(10, d);\n            default:\n                throw new Error('Unsupported rounding algorithm.');\n        }\n    }\n    isRate(v) {\n        return typeof v === 'string' && this.reRate.test(v);\n    }\n    isNumber(v) {\n        return typeof v === 'number' && Number.isFinite(v);\n    }\n    isCurrency(v) {\n        return typeof v === 'string' ? withTuple(currencies)(v) : false;\n    }\n    isObject(v) {\n        return typeof v === 'function' || (typeof v === 'object' && !!v);\n    }\n    isMoney(v) {\n        if (this.isObject(v)) {\n            if (hasProp(v, 'currency') && hasProp(v, 'number')) {\n                if (this.isCurrency(v.currency) && this.isNumber(v.number)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nexport class Account {\n    monval;\n    money;\n    constructor(monval, money) {\n        this.monval = monval;\n        this.money = money;\n    }\n    add(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.addRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.addMoney(money);\n        }\n        throw new Error(`Bad input. You should specify either number or rate such as \"%1.23\"`);\n    }\n    addRate(rate) {\n        this.money.number = this.money.number + (this.money.number * rate / 100);\n        return this;\n    }\n    addMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number += _money.number;\n            return this;\n        }\n        this.money.number += money.number;\n        return this;\n    }\n    subtract(numberOrRate, currency) {\n        const cur = currency || this.money.currency;\n        if (this.monval.isNumber(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        if (this.monval.isRate(numberOrRate)) {\n            return this.subtractRate(parseFloat(numberOrRate.slice(1)));\n        }\n        if (this.monval.reOnlyNumbers.test(numberOrRate)) {\n            const money = { number: numberOrRate, currency: cur };\n            return this.subtractMoney(money);\n        }\n        throw new Error(`Bad input. You should specify either number or rate such as \"%1.23\"`);\n    }\n    subtractRate(rate) {\n        this.money.number = this.money.number - (this.money.number * rate / 100);\n        return this;\n    }\n    subtractMoney(money) {\n        if (this.money.currency !== money.currency) {\n            const _money = this.monval.exchange(money, this.money.currency);\n            this.money.number -= _money.number;\n            return this;\n        }\n        this.money.number -= money.number;\n        return this;\n    }\n    exchange(target) {\n        if (!Object.hasOwn(this.monval.exchangeRates, this.monval.exchangeRatesBaseCurrency)) {\n            throw new Error(`Exchange rates not found.`);\n        }\n        if (!Object.hasOwn(this.monval.exchangeRates, target)) {\n            throw new Error(`Exchange rate for ${target} not found.`);\n        }\n        this.money.number = this.money.number * ((this.monval.exchangeRates[target] || 0) / (this.monval.exchangeRates[this.money.currency] || 1));\n        this.money.currency = target;\n        return this;\n    }\n    toFixed(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        const str = this.monval.round(this.money.number, _decilen).toString();\n        if (_decilen < 1) {\n            return str;\n        }\n        if (!str.includes('.')) {\n            return str + '.' + Array.apply(null, Array(_decilen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        const existingDecimalsLen = (str.split('.')[1] || []).length;\n        if (_decilen > existingDecimalsLen) {\n            return str + Array.apply(null, Array(_decilen - existingDecimalsLen)).map(Number.prototype.valueOf, 0).join('');\n        }\n        return str;\n    }\n    toFloat() {\n        return this.money.number;\n    }\n    toObject() {\n        return this.money;\n    }\n    pretty(decilen) {\n        const _decilen = decilen || this.monval.decilen;\n        return this.monval.getCurrencySymbol(this.money.currency) + ' ' + this.toFixed(_decilen);\n    }\n}\nexport const monval = new Monval();\n"],"names":["currencies","withTuple","list","prop","_includesInstanceProperty","call","hasProp","obj","Object","prototype","hasOwnProperty","Monval","_classCallCheck","_defineProperty","TRY","USD","EUR","GBP","JPY","AMD","AFN","THB","SVC","CRC","INR","BTC","_createClass","key","value","isValidInput","input","isMoney","reNumberWithCurrency","test","_input$split","split","_input$split2","_slicedToArray","currency","_num","isCurrency","create","cur","defaultCurrency","Account","isNumber","money","number","reOnlyNumbers","_parseFloat","_input$split3","_input$split4","num","Error","concat","exchange","target","hasOwn","exchangeRates","exchangeRatesBaseCurrency","getCurrencySymbol","currencySymbolUnicodeMap","String","fromCharCode","_parseInt","round","n","d","algorithm","arguments","length","undefined","x","Math","pow","r","br","abs","isRate","v","reRate","_Number$isFinite","isObject","_typeof","monval","add","numberOrRate","addMoney","addRate","_sliceInstanceProperty","rate","_money","subtract","subtractMoney","subtractRate","toFixed","decilen","_decilen","str","toString","_context","_mapInstanceProperty","Array","apply","Number","valueOf","join","existingDecimalsLen","_context2","toFloat","toObject","pretty"],"mappings":"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"}